{"version":3,"sources":["components/EventModal.js","components/EventList.js","components/Filter.js","components/Header.js","App.js","index.js"],"names":["EventModal","props","Modal","size","centered","className","Header","closeButton","Title","id","event","title","Body","src","spotifyUrl","width","height","frameBorder","allowtransparency","allow","Footer","EventList","events","useState","modalShow","setModalShow","selectedEvent","setSelectedEvent","sortedEvents","concat","sort","e1","e2","Date","date","map","sortedEvent","Intl","DateTimeFormat","weekday","year","month","day","format","hour","minute","startTime","supportingActs","length","supportingAct","index","onClick","show","onHide","Filter","userChange","startDate","endDate","selected","onChange","GET_EVENT_QUERY","gql","App","setStartDate","setEndDate","dateToString","getFullYear","getMonth","toString","getDate","useQuery","variables","dateFrom","dateTo","data","loading","error","fromDate","toDate","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.da431e8a.chunk.js","sourcesContent":["import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport '../css/modalbox.scss';\n\n\nfunction EventModal(props) {\n\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        className=\"event-modal\" \n      >\n\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            {props.event && <span>{props.event.title}</span>}\n          </Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n\n          {/* {props.event && props.event.artists.length > 0 && \n                                <h4 className=\"body-item-1\">\n                                  &#47;&#47; {props.event.artists.map((artist)=><span>{artist} &#47;&#47; </span>)}\n                                </h4>                                \n                                } */}\n       \n          {props.event && <iframe  title={props.event.id} src={props.event.spotifyUrl} width=\"100%\" height=\"380\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>}\n\n\n\n          {/* {props.event  && props.event.venue && \n                                <h5 className= \"body-item-2\">{props.event.venue} &#47;&#47; {`\n                                  ${new Intl.DateTimeFormat(\"en-GB\", {\n                                          hour: 'numeric',\n                                          minute: 'numeric',\n                                          }).format(new Date(props.event.startTime))}\n                                  - \n                                  ${new Intl.DateTimeFormat(\"en-GB\", {\n                                          hour: 'numeric',\n                                          minute: 'numeric',\n                                          }).format(new Date(props.event.endTime))}\n                                `}\n                                </h5>\n                              } */}\n\n          {/* {props.event && \n                          <h5 className= \"body-item-3\">\n                              {new Intl.DateTimeFormat(\"en-GB\", {\n                                    weekday: 'short', year: 'numeric', month: 'short', day: 'numeric'\n                                    }).format(new Date(props.event.date))}\n                              \n                          </h5>\n          }\n          \n          {props.event && props.event.promoters.length > 0 && <h6 className= \"body-item-4\">promoted by &#47;&#47; {props.event.promoters.map((promoter)=><span>{promoter} &#47;&#47; </span>)}</h6>} */}\n\n        </Modal.Body>\n\n        <Modal.Footer>\n          <div className=\"dot\"></div>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n  \n\nexport default EventModal;\n","import React, {useState} from 'react';\nimport '../css/eventlist.scss';\nimport {FaRegCalendarAlt, FaRegClock, FaVolumeUp,} from \"react-icons/fa\";\nimport EventModal from './EventModal';\n\n\nconst EventList = ({events}) => {\n\n    const [modalShow, setModalShow] = useState(false);\n    const [selectedEvent, setSelectedEvent] = useState(null);\n\n    const sortedEvents = events.concat().sort((e1, e2) => new Date(e1.date) - new Date(e2.date));\n\n    return (\n\n        <>        \n            <div className='event-container'>\n                {sortedEvents.map((sortedEvent)=> {\n\n                    return (\n                        <div key={sortedEvent.id} className=\"event\">\n\n                            <div className=\"event-title\">{sortedEvent.title}</div>\n                            \n                            <div className=\"event-date\">\n                                <FaRegCalendarAlt  />\n                                <span className=\"icon-margin\"></span>\n                                <p> \n                                    {new Intl.DateTimeFormat(\"en-GB\", {\n                                    weekday: 'short', year: 'numeric', month: 'short', day: 'numeric'\n                                    }).format(new Date(sortedEvent.date))}\n                                </p>\n                            </div>\n\n                            <div className=\"event-time\">\n                                <FaRegClock />\n                                <span className=\"icon-margin\"></span>\n                                Door Open:&nbsp;\n                                <p>\n                                    {new Intl.DateTimeFormat(\"en-GB\", {\n                                    hour: 'numeric',\n                                    minute: 'numeric',\n                                    }).format(new Date(sortedEvent.startTime))}\n                                </p>\n                            </div>\n\n                            {sortedEvent.supportingActs.length > 0 &&\n                                <div className=\"event-support\">\n                                    Supporting {sortedEvent.supportingActs.length === 1 ? \"Artist\" : \"Artists\"}: &nbsp;\n                                    {sortedEvent.supportingActs.map(\n                                         (supportingAct, index)=><span>{supportingAct}{index < sortedEvent.supportingActs.length - 1 ? \", \" : \"\"}</span>\n                                        )      \n                                    }\n                                </div>\n                            }\n\n                            {sortedEvent.supportingActs.length === 0 &&\n                                <div className=\"event-support\">\n                                    No Supporting Artist\n                                </div>\n                            }\n\n\n                            <div className=\"btn-holder\">\n                                <button className=\"btn btn-white mr-xs\" onClick={() => {\n                                    setSelectedEvent(sortedEvent);\n                                    setModalShow(true);\n                                }}>\n                                    Listen  <span className=\"icon-margin\"></span>\n                                    <FaVolumeUp />\n                                </button>\n\n                                <button className=\"btn btn-grey\">Get Tickets</button>                    \n                            </div>\n                            \n                        </div>\n                    )                \n                }   \n                )}\n            </div>\n\n            <EventModal \n                show={modalShow}\n                onHide={() => setModalShow(false)}\n                event={selectedEvent}\n            />\n        \n         </>\n   )\n}\n\nexport default EventList;\n","import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport '../css/filter.scss';\n\n\n\nconst Filter = ({userChange, startDate, endDate}) => {\n\n    // const [startDate, setStartDate] = useState(new Date(\"2022-01-01\"));\n    // const [endDate, setEndDate] = useState(new Date(\"2022-12-31\"));\n\n    // const startDateChange = (newDate) => {\n    //     onFilterChange(newDate, endDate);\n    //     setStartDate(newDate);\n    // }\n\n    // const endDateChange = (newDate) => {\n    //     onFilterChange(startDate, newDate);\n    //     setEndDate(newDate);\n    // }\n\n    return (\n        <div className='filter-container'>\n            <p className=\"mr-s\">Filter by Date </p>\n            <div><span className=\"mr-s\">from</span> <DatePicker selected={startDate} onChange={(date) => userChange(date, endDate)}/></div>\n            <div><span className=\"mr-s\">to</span> <DatePicker selected={endDate} onChange={(date) => userChange(startDate, date)} /></div>\n        </div>\n    )\n}\n\nexport default Filter\n \n\n","import React from 'react';\nimport Filter from './Filter';\nimport '../css/header.scss';\n\nconst Header = ({userChange, startDate, endDate}) => {\n\n\n    return (\n        <div className='header'>\n            <h1 className=\"title\">upcoming events in multiverse</h1>\n            <Filter userChange={userChange}\n                    startDate={startDate}\n                    endDate={endDate}\n            />  \n        </div>\n    )            \n       \n}\n\nexport default Header;\n","\nimport React, {useState} from 'react';\nimport './css/app.scss';\nimport EventList from './components/EventList';\nimport Header from './components/Header';\nimport { useQuery, gql } from \"@apollo/client\";\n\n\n\nconst GET_EVENT_QUERY = gql`\n   query GetEvents($dateFrom: String, $dateTo: String)\n    {\n      events (dateFrom:$dateFrom, dateTo:$dateTo) {\n        id\n        title\n        date\n        startTime\n        spotifyUrl\n        supportingActs\n      }\n    }\n`;\n\n\nfunction App() {\n\n  const [startDate, setStartDate] = useState(new Date(\"2022-01-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2022-12-31\"));\n\n\n  const dateToString = (date) => {\n    let year = date.getFullYear();\n  \n    let month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n  \n    let day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n    \n    return year + '-' + month + '-' + day + 'T00:00:00';\n  }\n  \n\n  const { data, loading, error } = useQuery(GET_EVENT_QUERY, {\n    variables: { dateFrom: dateToString(startDate), dateTo: dateToString(endDate)}\n   });\n\n\n  const onFilterChange = (fromDate, toDate) => {\n    setStartDate(fromDate);\n    setEndDate(toDate);\n  }\n\n  return (\n    \n    <>\n        <div className=\"app\">\n            <Header userChange={onFilterChange}\n                    startDate={startDate}\n                    endDate={endDate}\n            />      \n    \n            {loading && !data && \n              <div className=\"center\">\n                  <div className=\"wave\"></div>\n                  <div className=\"wave\"></div>\n                  <div className=\"wave\"></div>\n                  <div className=\"wave\"></div>\n                  <div className=\"wave\"></div>    \n              </div>\n            }\n      \n            {error && <div className=\"error-message center blinking\"><p> Oops! something went wrong!</p></div>}  \n\n            {data && data.events.length === 0 &&\n              <div className=\"warrning-message center white-text\">Sorry, No event during these dates!</div>\n            }\n\n            {data && data.events.length > 0 &&\n              < EventList events={data.events}/>  \n            }           \n        </div>\n    \n        <footer><span className=\"dot\"></span></footer>\n\n    </>    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport App from './App';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}